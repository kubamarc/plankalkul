P 1 () () () => () {
  Deklarieren Z[0;;9.9.10]
  P 2 () () () => Z[0;;9.9.10]
  P 8 () () (Z[0;;9.9.10]; 0; 0) => Z[2;;(0; 9.9.10)]
  P 3 () () (Z[2;1;9.9.10]) => Z[3;;10]
}

# Set up sudoku puzzle board
P 2 () () () => (R[0;;9.9.10]) {
  W1(9) {
    W1(9) {
      0 => R[0; i[1].i[0]; 10]
    }
  }
  8 => R[0; 0.0; 10]
  1 => R[0; 2.0; 10]
  4 => R[0; 5.0; 10]
  2 => R[0; 0.1; 10]
  7 => R[0; 6.1; 10]
  3 => R[0; 0.2; 10]
  4 => R[0; 1.2; 10]
  7 => R[0; 3.2; 10]
  6 => R[0; 4.2; 10]
  5 => R[0; 6.2; 10]
  3 => R[0; 2.3; 10]
  5 => R[0; 5.3; 10]
  9 => R[0; 6.3; 10]
  7 => R[0; 8.3; 10]
  6 => R[0; 3.4; 10]
  7 => R[0; 4.4; 10]
  8 => R[0; 5.4; 10]
  3 => R[0; 7.4; 10]
  2 => R[0; 8.4; 10]
  2 => R[0; 1.5; 10]
  7 => R[0; 2.5; 10]
  1 => R[0; 5.5; 10]
  3 => R[0; 1.6; 10]
  2 => R[0; 2.6; 10]
  4 => R[0; 3.6; 10]
  9 => R[0; 4.6; 10]
  7 => R[0; 5.6; 10]
  8 => R[0; 6.6; 10]
  6 => R[0; 7.6; 10]
  5 => R[0; 8.6; 10]
  1 => R[0; 3.7; 10]
  2 => R[0; 4.7; 10]
  7 => R[0; 0.8; 10]
  6 => R[0; 1.8; 10]
  4 => R[0; 2.8; 10]
  8 => R[0; 4.8; 10]
  3 => R[0; 5.8; 10]
  2 => R[0; 7.8; 10]
}

# Print all fields
P 3()()(V[0;;9.9.10]) => (R[0;;10]) {
  W1(9){
    W1(9){
      Drucken V[0;i[1].i[0];10]
    }
  }
  0 => R[0;;10]
}

# Check rows
P 4()()(V[0;;9.9.10]; V[1;;10]) => (R[0;;0]) {
  Deklarieren Z[0;;10.10]
  W1(10) {
    0 => Z[0;i[0];10]
  }
  Ja => R[0;;0]

# We count all numbers in row
  W1(9) {
    V[0; V[1;;10].i[0]; 10] => Z[1;;10]
    Z[0; Z[1;;10]; 10] + 1 => Z[0; Z[1;;10]; 10]
  }
  W1(9) {
    i[0] + 1 => Z[1;;10]
    Z[0; Z[1;;10]; 10] > 1 -> {
# Return Nein if any number occur more than once
      Nein => R[0;;0]
    }
  }
}


# Check columns
P 5()()(V[0;;9.9.10]; V[1;;10]) => (R[0;;0]) {
  Deklarieren Z[0;;10.10]
  W1(10) {
    0 => Z[0;i[0];10]
  }
  Ja => R[0;;0]

  W1(9) {
    V[0; i[0].V[1;;10]; 10] => Z[1;;10]
    Z[0; Z[1;;10]; 10] + 1 => Z[0; Z[1;;10]; 10]
  }
  W1(9) {
    i[0] + 1 => Z[1;;10]
    Z[0; Z[1;;10]; 10] > 1 -> {
# Return Nein if any number occur more than once
      Nein => R[0;;0]
    }
  }
}


# Check squares
P 6()()(V[0;;9.9.10]; V[1;;10]; V[2;;10]) => (R[0;;0]) {
  Deklarieren Z[0;;10.10]
  W1(10) {
    0 => Z[0;i[0];10]
  }
  Ja => R[0;;0]

# Find in which square is field
  P 9 () () (V[1;;10]; V[2;;10]) => Z[1;;10]
  Z[1;;10] / 3 => Z[4;;10]
  3 * Z[4;;10] => Z[4;;10]
  P 7 () () (Z[1;;10]) => Z[5;;10]
  3 * Z[5;;10] => Z[5;;10]
  W1(3) {
    W1(3) {
      i[0] + Z[4;;10] => Z[2;;10]
      i[1] + Z[5;;10] => Z[3;;10]
      V[0; Z[2;;10].Z[3;;10]; 10] => Z[1;;10]
      Z[0; Z[1;;10]; 10] + 1 => Z[0; Z[1;;10]; 10]
    }
  }
  W1(9) {
    i[0] + 1 => Z[1;;10]
    Z[0; Z[1;;10]; 10] > 1 -> {
      Nein => R[0;;0]
    }
  }
}


# Convert coordinates to square number
P 9 () () (V[0;;10]; V[1;;10]) => (R[0;;10]) {
  V[0;;10] / 3 => Z[0;;10]
  V[1;;10] / 3 => Z[1;;10]
  Z[0;;10] * 3 + Z[1;;10] => R[0;;10]
}

# 'modulo 3' function
P 7 ()()(V[0;;10]) => (R[0;;10]) {
  V[0;;10] => Z[0;;10]
  W {
    Z[0;;10] > 2 -> { # While Z_0 is bigger than 2
      Z[0;;10] - 3 => Z[0;;10] # We substract 3
    }
  }
  Z[0;;10] => R[0;;10]
}

# Backtrack solving sudoku
P 8 () () (V[0;;9.9.10]; V[1;;10]; V[2;;10]) => (R[0;;(0; 9.9.10)]) {
  V[0;;9.9.10] => Z[0;;9.9.10]
  V[1;;10] => Z[1;;10]
  V[2;;10] => Z[2;;10]
# If we came too far in line, we go to the next one
  Z[2;;10] > 8 -> {
    0 => Z[2;;10]
    Z[1;;10] + 1 => Z[1;;10]
  }
# If we didn't got out of sudoku board
  Z[1;;10] < 9 -> {
# If field is not empty
    Z[0; Z[1;;10].Z[2;;10]; 10] > 0 -> {
# We call backtrack on next field and return result
      P 8 () () (Z[0;;9.9.10]; Z[1;;10]; Z[2;;10] + 1) => R[0;;(0; 9.9.10)]
    }
# If field is empty
    Z[0; Z[1;;10].Z[2;;10]; 10] = 0 -> {
# We test which number fits there
      W3 (1; 10) {
        i => Z[0; Z[1;;10].Z[2;;10]; 10]
        P 4 () () (Z[0;;9.9.10]; Z[1;;10]) => Z[4;;0]
        P 5 () () (Z[0;;9.9.10]; Z[2;;10]) => Z[5;;0]
        P 6 () () (Z[0;;9.9.10]; Z[1;;10]; Z[2;;10]) => Z[6;;0]
# If number fits to line, column and square, we call backtrack on next field
        Z[4;;0] * Z[5;;0] * Z[6;;0] -> {
          P 8 () () (Z[0;;9.9.10]; Z[1;;10]; Z[2;;10] + 1) => Z[3;;(0;9.9.10)]
# If we get Ja in return, backtrack found solution, so we end
          Z[3;0;0] = Ja -> {
            Z[3;0;0] => R[0;0;0]
            Z[0;;9.9.10] => R[0;1;9.9.10]
            Ja -> Fin6
          }
        }
      }
# If we are here, backtrack havn't found any solution, so we have mistake earlier, so we clear that field and return Nein
      0 => Z[0; Z[1;;10].Z[2;;10]; 10]
      Nein => R[0;0;0]
      Z[0;;9.9.10] => R[0;1;9.9.10]
      Ja -> Fin2
    }
  }
# If we came out of board, it means we found solution!
  Z[1;;10] = 9 -> {
    Ja => R[0;0;0]
    Z[0;;9.9.10] => R[0;1;9.9.10]
  }
}
